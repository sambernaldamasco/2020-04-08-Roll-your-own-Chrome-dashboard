{"version":3,"sources":["logo.svg","components/TodoForm.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","props","useState","title","setTitle","description","setDescription","status","setStatus","priority","setPriority","onSubmit","event","preventDefault","task","console","log","addNewTask","type","value","onChange","e","target","TodoList","tasks","map","index","key","onClick","removeTask","moveTask","App","todo","setTodo","inProgress","setInProgress","done","setDone","todoCopy","splice","inProgressCopy","doneCopy","action","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\n\nconst TodoForm = (props) => {\n\tconst [title, setTitle] = useState('');\n\tconst [description, setDescription] = useState('');\n\tconst [status, setStatus] = useState('');\n\tconst [priority, setPriority] = useState('');\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst task = {\n\t\t\ttitle: title,\n\t\t\tdescription: description,\n\t\t\tstatus: status,\n\t\t\tpriority: priority,\n\t\t};\n\n\t\tconsole.log(task);\n\t\tprops.addNewTask(task);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<label>\n\t\t\t\t\ttitle:\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\tdescription:\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\tonChange={(e) => setDescription(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\tstatus:\n\t\t\t\t\t<select value={status} onChange={(e) => setStatus(e.target.value)}>\n\t\t\t\t\t\t<option> ------------ </option>\n\t\t\t\t\t\t<option value=\"todo\"> to do </option>\n\t\t\t\t\t\t<option value=\"inProgress\"> in progress </option>\n\t\t\t\t\t\t<option value=\"done\"> done </option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\n\t\t\t\t<label>\n\t\t\t\t\tpriority:\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={priority}\n\t\t\t\t\t\tonChange={(e) => setPriority(e.target.value)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option> ------------ </option>\n\t\t\t\t\t\t<option value=\"low\"> low </option>\n\t\t\t\t\t\t<option value=\"medium\"> medium </option>\n\t\t\t\t\t\t<option value=\"high\"> high </option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\n\t\t\t\t<input type=\"submit\" value=\"add new\" />\n\t\t\t</form>\n\t\t</>\n\t);\n};\n\nexport default TodoForm;\n","import React, { useState } from 'react';\n\nconst TodoList = (props) => {\n\treturn (\n\t\t<>\n\t\t\t{props.tasks.map((task, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t<h2> {task.title}</h2>\n\t\t\t\t\t\t<p> {task.description}</p>\n\t\t\t\t\t\t<h4> {task.priority}</h4>\n\t\t\t\t\t\t<button onClick={() => props.removeTask(task, index)}>\n\t\t\t\t\t\t\tremove task\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t{task.status === 'todo' ? (\n\t\t\t\t\t\t\t<button onClick={() => props.moveTask('inProgress', task, index)}>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tIn Progress{' '}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t{task.status === 'inProgress' ? (\n\t\t\t\t\t\t\t<button onClick={() => props.moveTask('done', task, index)}>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tdone{' '}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</>\n\t);\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n\tconst [todo, setTodo] = useState([]);\n\tconst [inProgress, setInProgress] = useState([]);\n\tconst [done, setDone] = useState([]);\n\n\tconst addNewTask = (task) => {\n\t\tswitch (task.status) {\n\t\t\tcase 'todo':\n\t\t\t\tsetTodo((todo) => [...todo, task]);\n\t\t\t\tbreak;\n\t\t\tcase 'inProgress':\n\t\t\t\tsetInProgress((inProgress) => [...inProgress, task]);\n\t\t\t\tbreak;\n\t\t\tcase 'done':\n\t\t\t\tsetDone((done) => [...done, task]);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tconst removeTask = (task, index) => {\n\t\tswitch (task.status) {\n\t\t\tcase 'todo':\n\t\t\t\tconst todoCopy = [...todo];\n\t\t\t\ttodoCopy.splice(index, 1);\n\t\t\t\tsetTodo(todoCopy);\n\t\t\t\tbreak;\n\t\t\tcase 'inProgress':\n\t\t\t\tconst inProgressCopy = [...inProgress];\n\t\t\t\tinProgressCopy.splice(index, 1);\n\t\t\t\tsetInProgress(inProgressCopy);\n\t\t\t\tbreak;\n\t\t\tcase 'done':\n\t\t\t\tconst doneCopy = [...done];\n\t\t\t\tdoneCopy.splice(index, 1);\n\t\t\t\tsetDone(doneCopy);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\tconst moveTask = (action, task, index) => {\n\t\tswitch (action) {\n\t\t\tcase 'todo':\n\t\t\t\tremoveTask(task, index);\n\t\t\t\ttask.status = 'todo';\n\t\t\t\tsetTodo((todo) => [...todo, task]);\n\t\t\t\tbreak;\n\t\t\tcase 'inProgress':\n\t\t\t\tremoveTask(task, index);\n\t\t\t\ttask.status = 'inProgress';\n\t\t\t\tsetInProgress((inProgress) => [...inProgress, task]);\n\t\t\t\tbreak;\n\t\t\tcase 'done':\n\t\t\t\tremoveTask(task, index);\n\t\t\t\ttask.status = 'done';\n\t\t\t\tsetDone((done) => [...done, task]);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TodoForm addNewTask={addNewTask} />\n\n\t\t\t<h1>to do</h1>\n\t\t\t<TodoList tasks={todo} removeTask={removeTask} moveTask={moveTask} />\n\n\t\t\t<h1>in progress</h1>\n\t\t\t<TodoList\n\t\t\t\ttasks={inProgress}\n\t\t\t\tremoveTask={removeTask}\n\t\t\t\tmoveTask={moveTask}\n\t\t\t/>\n\n\t\t\t<h1>done</h1>\n\t\t\t<TodoList tasks={done} removeTask={removeTask} moveTask={moveTask} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}